# -*- coding: utf-8 -*-
"""Deepfake.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OFqrvHu0ivJITo2wOF6KwjrwGdFhZpAX
"""

!pip install tensorflow kagglehub openai --quiet

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
import numpy as np
import kagglehub
import os

path = kagglehub.dataset_download("ciplab/real-and-fake-face-detection")
dataset_dir = os.path.join(path, "real_and_fake_face")

img_size = (128, 128)
batch_size = 32

datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2
)

train_data = datagen.flow_from_directory(
    dataset_dir,
    target_size=img_size,
    batch_size=batch_size,
    class_mode='binary',
    subset='training'
)

val_data = datagen.flow_from_directory(
    dataset_dir,
    target_size=img_size,
    batch_size=batch_size,
    class_mode='binary',
    subset='validation'
)

model = models.Sequential([
    layers.Conv2D(32, (3,3), activation='relu', input_shape=(128,128,3)),
    layers.MaxPooling2D(2,2),
    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D(2,2),
    layers.Conv2D(128, (3,3), activation='relu'),
    layers.MaxPooling2D(2,2),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

epochs = 10
history = model.fit(
    train_data,
    validation_data=val_data,
    epochs=epochs
)

plt.figure(figsize=(12,5))

plt.subplot(1,2,1)
plt.plot(history.history['accuracy'], label='Train Acc')
plt.plot(history.history['val_accuracy'], label='Val Acc')
plt.title('Accuracy')
plt.legend()

plt.subplot(1,2,2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.title('Loss')
plt.legend()

plt.show()

model.save("fake_detection_cnn.h5")

val_batch, val_labels = next(val_data)
sample_img = val_batch[0]
sample_label = val_labels[0]

pred = model.predict(np.expand_dims(sample_img, axis=0))[0][0]
pred_class = "Fake" if pred > 0.5 else "Real"
actual_class = "Fake" if sample_label > 0.5 else "Real"

print(f"Predicted class: {pred_class} | Actual: {actual_class}")
print("Prediction value:", pred)

plt.imshow(sample_img)
plt.axis("off")
plt.show()